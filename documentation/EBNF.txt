<ident> ::= [a..z] { <ident> }

<number> ::= [0..9] { <number> }

<id_num> ::= [ <ident> | <number> ]

<term> ::= <id_num> { ( "*" | "/" ) <id_num> }

<expression> ::= <term> { ( "+" | "-" ) <term> }

-------EXTRA RULE TO SIMPLIFY COMPOUND STATEMENT--------

<statement_loop> ::= <statement> { ";" <statement> }

--------------------------------------------------------

<compound_statement> ::= BEGIN <statement_loop> END

<for_statement> ::= FOR <ident> ":=" <expression> DO <statement_loop> END FOR

<do_statement> ::= DO <statement_loop> WHILE <expression> END DO

<while_statement> ::= WHILE <expression> DO <statement_loop> END WHILE

<if_statement> ::= IF <expression> THEN <statement> END IF

<procedure_call> ::= CALL <ident>

<assignment> ::= <ident> ":=" <expression>

<statement> ::= <assignment>
			  | <procedure_call>
			  | <if_statement>
			  | <while_statement>
			  | <do_statement>
			  | <for_statement>
			  | <compound_statement>

<implementation_part> ::= <statement>

<function_declaration> ::= FUNCTION <ident> ";" <block> ";"

<procedure_declaration> ::= PROCEDURE <ident> ";" <block> ";"

<specification_part> ::= {}
					   | CONST <constant_declaration>
					   | VAR <variable_declaration>
					   | <procedure_declaration>
					   | <function_declaration>

<block> ::= <specification_part> <implementation_part>

<implementation_unit> ::= IMPLEMENTATION OF <ident> <block> "."

<range> ::= <number> ".." <number>

<array_type> ::= ARRAY <ident> "[" <range> "]" OF <type>

<range_type> ::= "[" <range> "]"

<enumerated_type> ::= "{" <ident> { "," <ident> } "}"

<basic_type> ::= <ident> 
			   | <enumerated_type>
			   | <range_type>

<type> ::= <basic_type>
         | <array_type>

<variable_declaration> ::= <ident> ":" <ident> { "," <ident> ":" <ident> } ";"

<constant_declaration> ::= <ident> "=" <number> { "," <ident> ":" <number> } ";"

<formal_parameters> ::= "(" <ident> { ";" <ident> } ")"

<type_declaration> ::= TYPE <ident> ":" <type> ";"

<function_interface> ::= FUNCTION <ident> [ <formal_parameters> ]

<procedure_interace> ::= PROCEDURE <ident> [ <formal_parameters> ]

<declaration_unit> ::= DECLARATION OF <ident>
					   [ CONST <constant_declaration> ]
					   [ VAR <variable_declaration> ]
					   [ <type_declaration> ]
					   [ <procedure_interface> ]
					   [ <function_interface> ]

<basic_program> ::= <declaration_unit> <implemenetation_unit>
