Grammar

    0 $accept: basic_program $end

    1 basic_program: declaration_unit
    2              | implementation_unit

    3 opt_constant_declaration: _CONST_ constant_declaration
    4                         | /* empty */

    5 opt_variable_declaration: _VAR_ constant_declaration
    6                         | /* empty */

    7 opt_type_declaration: type_declaration
    8                     | /* empty */

    9 opt_procedure_interface: procedure_interface
   10                        | /* empty */

   11 opt_function_interface: function_interface
   12                       | /* empty */

   13 opt_formal_parameters: formal_parameters
   14                      | /* empty */

   15 declaration_unit: _DECLARATION_ _OF_ _IDENT_ opt_constant_declaration opt_variable_declaration opt_type_declaration opt_procedure_interface opt_function_interface _DECLARATION_ _END_

   16 procedure_interface: _PROCEDURE_ _IDENT_ opt_formal_parameters

   17 function_interface: _FUNCTION_ _IDENT_ opt_formal_parameters

   18 type_declaration: _TYPE_ _IDENT_ ':' type _SEMICOLON_

   19 ident_loop_semicolon: _IDENT_
   20                     | ident_loop_semicolon _SEMICOLON_ _IDENT_

   21 formal_parameters: '(' ident_loop_semicolon ')'

   22 constant_loop: _IDENT_ '=' _NUMBER_
   23              | constant_loop ',' _IDENT_ '=' _NUMBER_

   24 constant_declaration: constant_loop _SEMICOLON_

   25 variable_loop: _IDENT_ ':' _IDENT_
   26              | variable_loop ',' _IDENT_ ':' _IDENT_

   27 variable_declaration: variable_loop _SEMICOLON_

   28 type: basic_type
   29     | array_type

   30 basic_type: _IDENT_
   31           | enumerated_type
   32           | range_type

   33 ident_loop_comma: _IDENT_
   34                 | ident_loop_comma ',' _IDENT_

   35 enumerated_type: '{' ident_loop_comma '}'

   36 range_type: '[' range ']'

   37 array_type: _ARRAY_ _IDENT_ '[' range ']' _OF_ type

   38 range: _NUMBER_ _DOUBLE_DOT_ _NUMBER_

   39 implementation_unit: _IMPLEMENTATION_ _OF_ _IDENT_ block '.'

   40 block: specification_part implementation_part

   41 specification_part: _CONST_ constant_declaration
   42                   | _VAR_ variable_declaration
   43                   | procedure_declaration
   44                   | function_declaration
   45                   | /* empty */

   46 procedure_declaration: _PROCEDURE_ _IDENT_ _SEMICOLON_ block _SEMICOLON_

   47 function_declaration: _FUNCTION_ _IDENT_ _SEMICOLON_ block _SEMICOLON_

   48 implementation_part: statement

   49 statement: assignment
   50          | procedure_call
   51          | if_statement
   52          | while_statement
   53          | do_statement
   54          | for_statement
   55          | compound_statement

   56 assignment: _IDENT_ _ASSIGNMENT_ expression

   57 procedure_call: _CALL_ _IDENT_

   58 if_statement: _IF_ expression _THEN_ statement _END_IF_

   59 while_statement: _WHILE_ expression _DO_ statement_loop _END_WHILE_

   60 do_statement: _DO_ statement_loop _WHILE_ expression _END_DO_

   61 for_statement: _FOR_ _IDENT_ _ASSIGNMENT_ expression _DO_ statement_loop _END_FOR_

   62 compound_statement: _BEGIN_ statement_loop _END_

   63 statement_loop: statement
   64               | statement_loop _SEMICOLON_ statement

   65 expression: expression_loop

   66 expression_loop: term
   67                | expression_loop '+' term
   68                | expression_loop '-' term

   69 term: term_loop

   70 term_loop: id_num
   71          | term_loop '*' id_num
   72          | term_loop '/' id_num

   73 id_num: _IDENT_
   74       | _NUMBER_


Terminals, with rules where they appear

$end (0) 0
'(' (40) 21
')' (41) 21
'*' (42) 71
'+' (43) 67
',' (44) 23 26 34
'-' (45) 68
'.' (46) 39
'/' (47) 72
':' (58) 18 25 26
'=' (61) 22 23
'[' (91) 36 37
']' (93) 36 37
'{' (123) 35
'}' (125) 35
error (256)
_ASSIGNMENT_ (258) 56 61
_ARRAY_ (259) 37
_BEGIN_ (260) 62
_CALL_ (261) 57
_CONST_ (262) 3 41
_DECLARATION_ (263) 15
_DO_ (264) 59 60 61
_DOUBLE_DOT_ (265) 38
_END_ (266) 15 62
_END_DO_ (267) 60
_END_FOR_ (268) 61
_END_IF_ (269) 58
_END_WHILE_ (270) 59
_FOR_ (271) 61
_FUNCTION_ (272) 17 47
_IDENT_ (273) 15 16 17 18 19 20 22 23 25 26 30 33 34 37 39 46 47 56
    57 61 73
_IF_ (274) 58
_IMPLEMENTATION_ (275) 39
_NUMBER_ (276) 22 23 38 74
_OF_ (277) 15 37 39
_PROCEDURE_ (278) 16 46
_SEMICOLON_ (279) 18 20 24 27 46 47 64
_THEN_ (280) 58
_TYPE_ (281) 18
_VAR_ (282) 5 42
_WHILE_ (283) 59 60


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
basic_program (44)
    on left: 1 2, on right: 0
opt_constant_declaration (45)
    on left: 3 4, on right: 15
opt_variable_declaration (46)
    on left: 5 6, on right: 15
opt_type_declaration (47)
    on left: 7 8, on right: 15
opt_procedure_interface (48)
    on left: 9 10, on right: 15
opt_function_interface (49)
    on left: 11 12, on right: 15
opt_formal_parameters (50)
    on left: 13 14, on right: 16 17
declaration_unit (51)
    on left: 15, on right: 1
procedure_interface (52)
    on left: 16, on right: 9
function_interface (53)
    on left: 17, on right: 11
type_declaration (54)
    on left: 18, on right: 7
ident_loop_semicolon (55)
    on left: 19 20, on right: 20 21
formal_parameters (56)
    on left: 21, on right: 13
constant_loop (57)
    on left: 22 23, on right: 23 24
constant_declaration (58)
    on left: 24, on right: 3 5 41
variable_loop (59)
    on left: 25 26, on right: 26 27
variable_declaration (60)
    on left: 27, on right: 42
type (61)
    on left: 28 29, on right: 18 37
basic_type (62)
    on left: 30 31 32, on right: 28
ident_loop_comma (63)
    on left: 33 34, on right: 34 35
enumerated_type (64)
    on left: 35, on right: 31
range_type (65)
    on left: 36, on right: 32
array_type (66)
    on left: 37, on right: 29
range (67)
    on left: 38, on right: 36 37
implementation_unit (68)
    on left: 39, on right: 2
block (69)
    on left: 40, on right: 39 46 47
specification_part (70)
    on left: 41 42 43 44 45, on right: 40
procedure_declaration (71)
    on left: 46, on right: 43
function_declaration (72)
    on left: 47, on right: 44
implementation_part (73)
    on left: 48, on right: 40
statement (74)
    on left: 49 50 51 52 53 54 55, on right: 48 58 63 64
assignment (75)
    on left: 56, on right: 49
procedure_call (76)
    on left: 57, on right: 50
if_statement (77)
    on left: 58, on right: 51
while_statement (78)
    on left: 59, on right: 52
do_statement (79)
    on left: 60, on right: 53
for_statement (80)
    on left: 61, on right: 54
compound_statement (81)
    on left: 62, on right: 55
statement_loop (82)
    on left: 63 64, on right: 59 60 61 62 64
expression (83)
    on left: 65, on right: 56 58 59 60 61
expression_loop (84)
    on left: 66 67 68, on right: 65 67 68
term (85)
    on left: 69, on right: 66 67 68
term_loop (86)
    on left: 70 71 72, on right: 69 71 72
id_num (87)
    on left: 73 74, on right: 70 71 72


state 0

    0 $accept: . basic_program $end

    _DECLARATION_     shift, and go to state 1
    _IMPLEMENTATION_  shift, and go to state 2

    basic_program        go to state 3
    declaration_unit     go to state 4
    implementation_unit  go to state 5


state 1

   15 declaration_unit: _DECLARATION_ . _OF_ _IDENT_ opt_constant_declaration opt_variable_declaration opt_type_declaration opt_procedure_interface opt_function_interface _DECLARATION_ _END_

    _OF_  shift, and go to state 6


state 2

   39 implementation_unit: _IMPLEMENTATION_ . _OF_ _IDENT_ block '.'

    _OF_  shift, and go to state 7


state 3

    0 $accept: basic_program . $end

    $end  shift, and go to state 8


state 4

    1 basic_program: declaration_unit .

    $default  reduce using rule 1 (basic_program)


state 5

    2 basic_program: implementation_unit .

    $default  reduce using rule 2 (basic_program)


state 6

   15 declaration_unit: _DECLARATION_ _OF_ . _IDENT_ opt_constant_declaration opt_variable_declaration opt_type_declaration opt_procedure_interface opt_function_interface _DECLARATION_ _END_

    _IDENT_  shift, and go to state 9


state 7

   39 implementation_unit: _IMPLEMENTATION_ _OF_ . _IDENT_ block '.'

    _IDENT_  shift, and go to state 10


state 8

    0 $accept: basic_program $end .

    $default  accept


state 9

   15 declaration_unit: _DECLARATION_ _OF_ _IDENT_ . opt_constant_declaration opt_variable_declaration opt_type_declaration opt_procedure_interface opt_function_interface _DECLARATION_ _END_

    _CONST_  shift, and go to state 11

    $default  reduce using rule 4 (opt_constant_declaration)

    opt_constant_declaration  go to state 12


state 10

   39 implementation_unit: _IMPLEMENTATION_ _OF_ _IDENT_ . block '.'

    _CONST_      shift, and go to state 13
    _FUNCTION_   shift, and go to state 14
    _PROCEDURE_  shift, and go to state 15
    _VAR_        shift, and go to state 16

    $default  reduce using rule 45 (specification_part)

    block                  go to state 17
    specification_part     go to state 18
    procedure_declaration  go to state 19
    function_declaration   go to state 20


state 11

    3 opt_constant_declaration: _CONST_ . constant_declaration

    _IDENT_  shift, and go to state 21

    constant_loop         go to state 22
    constant_declaration  go to state 23


state 12

   15 declaration_unit: _DECLARATION_ _OF_ _IDENT_ opt_constant_declaration . opt_variable_declaration opt_type_declaration opt_procedure_interface opt_function_interface _DECLARATION_ _END_

    _VAR_  shift, and go to state 24

    $default  reduce using rule 6 (opt_variable_declaration)

    opt_variable_declaration  go to state 25


state 13

   41 specification_part: _CONST_ . constant_declaration

    _IDENT_  shift, and go to state 21

    constant_loop         go to state 22
    constant_declaration  go to state 26


state 14

   47 function_declaration: _FUNCTION_ . _IDENT_ _SEMICOLON_ block _SEMICOLON_

    _IDENT_  shift, and go to state 27


state 15

   46 procedure_declaration: _PROCEDURE_ . _IDENT_ _SEMICOLON_ block _SEMICOLON_

    _IDENT_  shift, and go to state 28


state 16

   42 specification_part: _VAR_ . variable_declaration

    _IDENT_  shift, and go to state 29

    variable_loop         go to state 30
    variable_declaration  go to state 31


state 17

   39 implementation_unit: _IMPLEMENTATION_ _OF_ _IDENT_ block . '.'

    '.'  shift, and go to state 32


state 18

   40 block: specification_part . implementation_part

    _BEGIN_  shift, and go to state 33
    _CALL_   shift, and go to state 34
    _DO_     shift, and go to state 35
    _FOR_    shift, and go to state 36
    _IDENT_  shift, and go to state 37
    _IF_     shift, and go to state 38
    _WHILE_  shift, and go to state 39

    implementation_part  go to state 40
    statement            go to state 41
    assignment           go to state 42
    procedure_call       go to state 43
    if_statement         go to state 44
    while_statement      go to state 45
    do_statement         go to state 46
    for_statement        go to state 47
    compound_statement   go to state 48


state 19

   43 specification_part: procedure_declaration .

    $default  reduce using rule 43 (specification_part)


state 20

   44 specification_part: function_declaration .

    $default  reduce using rule 44 (specification_part)


state 21

   22 constant_loop: _IDENT_ . '=' _NUMBER_

    '='  shift, and go to state 49


state 22

   23 constant_loop: constant_loop . ',' _IDENT_ '=' _NUMBER_
   24 constant_declaration: constant_loop . _SEMICOLON_

    _SEMICOLON_  shift, and go to state 50
    ','          shift, and go to state 51


state 23

    3 opt_constant_declaration: _CONST_ constant_declaration .

    $default  reduce using rule 3 (opt_constant_declaration)


state 24

    5 opt_variable_declaration: _VAR_ . constant_declaration

    _IDENT_  shift, and go to state 21

    constant_loop         go to state 22
    constant_declaration  go to state 52


state 25

   15 declaration_unit: _DECLARATION_ _OF_ _IDENT_ opt_constant_declaration opt_variable_declaration . opt_type_declaration opt_procedure_interface opt_function_interface _DECLARATION_ _END_

    _TYPE_  shift, and go to state 53

    $default  reduce using rule 8 (opt_type_declaration)

    opt_type_declaration  go to state 54
    type_declaration      go to state 55


state 26

   41 specification_part: _CONST_ constant_declaration .

    $default  reduce using rule 41 (specification_part)


state 27

   47 function_declaration: _FUNCTION_ _IDENT_ . _SEMICOLON_ block _SEMICOLON_

    _SEMICOLON_  shift, and go to state 56


state 28

   46 procedure_declaration: _PROCEDURE_ _IDENT_ . _SEMICOLON_ block _SEMICOLON_

    _SEMICOLON_  shift, and go to state 57


state 29

   25 variable_loop: _IDENT_ . ':' _IDENT_

    ':'  shift, and go to state 58


state 30

   26 variable_loop: variable_loop . ',' _IDENT_ ':' _IDENT_
   27 variable_declaration: variable_loop . _SEMICOLON_

    _SEMICOLON_  shift, and go to state 59
    ','          shift, and go to state 60


state 31

   42 specification_part: _VAR_ variable_declaration .

    $default  reduce using rule 42 (specification_part)


state 32

   39 implementation_unit: _IMPLEMENTATION_ _OF_ _IDENT_ block '.' .

    $default  reduce using rule 39 (implementation_unit)


state 33

   62 compound_statement: _BEGIN_ . statement_loop _END_

    _BEGIN_  shift, and go to state 33
    _CALL_   shift, and go to state 34
    _DO_     shift, and go to state 35
    _FOR_    shift, and go to state 36
    _IDENT_  shift, and go to state 37
    _IF_     shift, and go to state 38
    _WHILE_  shift, and go to state 39

    statement           go to state 61
    assignment          go to state 42
    procedure_call      go to state 43
    if_statement        go to state 44
    while_statement     go to state 45
    do_statement        go to state 46
    for_statement       go to state 47
    compound_statement  go to state 48
    statement_loop      go to state 62


state 34

   57 procedure_call: _CALL_ . _IDENT_

    _IDENT_  shift, and go to state 63


state 35

   60 do_statement: _DO_ . statement_loop _WHILE_ expression _END_DO_

    _BEGIN_  shift, and go to state 33
    _CALL_   shift, and go to state 34
    _DO_     shift, and go to state 35
    _FOR_    shift, and go to state 36
    _IDENT_  shift, and go to state 37
    _IF_     shift, and go to state 38
    _WHILE_  shift, and go to state 39

    statement           go to state 61
    assignment          go to state 42
    procedure_call      go to state 43
    if_statement        go to state 44
    while_statement     go to state 45
    do_statement        go to state 46
    for_statement       go to state 47
    compound_statement  go to state 48
    statement_loop      go to state 64


state 36

   61 for_statement: _FOR_ . _IDENT_ _ASSIGNMENT_ expression _DO_ statement_loop _END_FOR_

    _IDENT_  shift, and go to state 65


state 37

   56 assignment: _IDENT_ . _ASSIGNMENT_ expression

    _ASSIGNMENT_  shift, and go to state 66


state 38

   58 if_statement: _IF_ . expression _THEN_ statement _END_IF_

    _IDENT_   shift, and go to state 67
    _NUMBER_  shift, and go to state 68

    expression       go to state 69
    expression_loop  go to state 70
    term             go to state 71
    term_loop        go to state 72
    id_num           go to state 73


state 39

   59 while_statement: _WHILE_ . expression _DO_ statement_loop _END_WHILE_

    _IDENT_   shift, and go to state 67
    _NUMBER_  shift, and go to state 68

    expression       go to state 74
    expression_loop  go to state 70
    term             go to state 71
    term_loop        go to state 72
    id_num           go to state 73


state 40

   40 block: specification_part implementation_part .

    $default  reduce using rule 40 (block)


state 41

   48 implementation_part: statement .

    $default  reduce using rule 48 (implementation_part)


state 42

   49 statement: assignment .

    $default  reduce using rule 49 (statement)


state 43

   50 statement: procedure_call .

    $default  reduce using rule 50 (statement)


state 44

   51 statement: if_statement .

    $default  reduce using rule 51 (statement)


state 45

   52 statement: while_statement .

    $default  reduce using rule 52 (statement)


state 46

   53 statement: do_statement .

    $default  reduce using rule 53 (statement)


state 47

   54 statement: for_statement .

    $default  reduce using rule 54 (statement)


state 48

   55 statement: compound_statement .

    $default  reduce using rule 55 (statement)


state 49

   22 constant_loop: _IDENT_ '=' . _NUMBER_

    _NUMBER_  shift, and go to state 75


state 50

   24 constant_declaration: constant_loop _SEMICOLON_ .

    $default  reduce using rule 24 (constant_declaration)


state 51

   23 constant_loop: constant_loop ',' . _IDENT_ '=' _NUMBER_

    _IDENT_  shift, and go to state 76


state 52

    5 opt_variable_declaration: _VAR_ constant_declaration .

    $default  reduce using rule 5 (opt_variable_declaration)


state 53

   18 type_declaration: _TYPE_ . _IDENT_ ':' type _SEMICOLON_

    _IDENT_  shift, and go to state 77


state 54

   15 declaration_unit: _DECLARATION_ _OF_ _IDENT_ opt_constant_declaration opt_variable_declaration opt_type_declaration . opt_procedure_interface opt_function_interface _DECLARATION_ _END_

    _PROCEDURE_  shift, and go to state 78

    $default  reduce using rule 10 (opt_procedure_interface)

    opt_procedure_interface  go to state 79
    procedure_interface      go to state 80


state 55

    7 opt_type_declaration: type_declaration .

    $default  reduce using rule 7 (opt_type_declaration)


state 56

   47 function_declaration: _FUNCTION_ _IDENT_ _SEMICOLON_ . block _SEMICOLON_

    _CONST_      shift, and go to state 13
    _FUNCTION_   shift, and go to state 14
    _PROCEDURE_  shift, and go to state 15
    _VAR_        shift, and go to state 16

    $default  reduce using rule 45 (specification_part)

    block                  go to state 81
    specification_part     go to state 18
    procedure_declaration  go to state 19
    function_declaration   go to state 20


state 57

   46 procedure_declaration: _PROCEDURE_ _IDENT_ _SEMICOLON_ . block _SEMICOLON_

    _CONST_      shift, and go to state 13
    _FUNCTION_   shift, and go to state 14
    _PROCEDURE_  shift, and go to state 15
    _VAR_        shift, and go to state 16

    $default  reduce using rule 45 (specification_part)

    block                  go to state 82
    specification_part     go to state 18
    procedure_declaration  go to state 19
    function_declaration   go to state 20


state 58

   25 variable_loop: _IDENT_ ':' . _IDENT_

    _IDENT_  shift, and go to state 83


state 59

   27 variable_declaration: variable_loop _SEMICOLON_ .

    $default  reduce using rule 27 (variable_declaration)


state 60

   26 variable_loop: variable_loop ',' . _IDENT_ ':' _IDENT_

    _IDENT_  shift, and go to state 84


state 61

   63 statement_loop: statement .

    $default  reduce using rule 63 (statement_loop)


state 62

   62 compound_statement: _BEGIN_ statement_loop . _END_
   64 statement_loop: statement_loop . _SEMICOLON_ statement

    _END_        shift, and go to state 85
    _SEMICOLON_  shift, and go to state 86


state 63

   57 procedure_call: _CALL_ _IDENT_ .

    $default  reduce using rule 57 (procedure_call)


state 64

   60 do_statement: _DO_ statement_loop . _WHILE_ expression _END_DO_
   64 statement_loop: statement_loop . _SEMICOLON_ statement

    _SEMICOLON_  shift, and go to state 86
    _WHILE_      shift, and go to state 87


state 65

   61 for_statement: _FOR_ _IDENT_ . _ASSIGNMENT_ expression _DO_ statement_loop _END_FOR_

    _ASSIGNMENT_  shift, and go to state 88


state 66

   56 assignment: _IDENT_ _ASSIGNMENT_ . expression

    _IDENT_   shift, and go to state 67
    _NUMBER_  shift, and go to state 68

    expression       go to state 89
    expression_loop  go to state 70
    term             go to state 71
    term_loop        go to state 72
    id_num           go to state 73


state 67

   73 id_num: _IDENT_ .

    $default  reduce using rule 73 (id_num)


state 68

   74 id_num: _NUMBER_ .

    $default  reduce using rule 74 (id_num)


state 69

   58 if_statement: _IF_ expression . _THEN_ statement _END_IF_

    _THEN_  shift, and go to state 90


state 70

   65 expression: expression_loop .
   67 expression_loop: expression_loop . '+' term
   68                | expression_loop . '-' term

    '+'  shift, and go to state 91
    '-'  shift, and go to state 92

    $default  reduce using rule 65 (expression)


state 71

   66 expression_loop: term .

    $default  reduce using rule 66 (expression_loop)


state 72

   69 term: term_loop .
   71 term_loop: term_loop . '*' id_num
   72          | term_loop . '/' id_num

    '*'  shift, and go to state 93
    '/'  shift, and go to state 94

    $default  reduce using rule 69 (term)


state 73

   70 term_loop: id_num .

    $default  reduce using rule 70 (term_loop)


state 74

   59 while_statement: _WHILE_ expression . _DO_ statement_loop _END_WHILE_

    _DO_  shift, and go to state 95


state 75

   22 constant_loop: _IDENT_ '=' _NUMBER_ .

    $default  reduce using rule 22 (constant_loop)


state 76

   23 constant_loop: constant_loop ',' _IDENT_ . '=' _NUMBER_

    '='  shift, and go to state 96


state 77

   18 type_declaration: _TYPE_ _IDENT_ . ':' type _SEMICOLON_

    ':'  shift, and go to state 97


state 78

   16 procedure_interface: _PROCEDURE_ . _IDENT_ opt_formal_parameters

    _IDENT_  shift, and go to state 98


state 79

   15 declaration_unit: _DECLARATION_ _OF_ _IDENT_ opt_constant_declaration opt_variable_declaration opt_type_declaration opt_procedure_interface . opt_function_interface _DECLARATION_ _END_

    _FUNCTION_  shift, and go to state 99

    $default  reduce using rule 12 (opt_function_interface)

    opt_function_interface  go to state 100
    function_interface      go to state 101


state 80

    9 opt_procedure_interface: procedure_interface .

    $default  reduce using rule 9 (opt_procedure_interface)


state 81

   47 function_declaration: _FUNCTION_ _IDENT_ _SEMICOLON_ block . _SEMICOLON_

    _SEMICOLON_  shift, and go to state 102


state 82

   46 procedure_declaration: _PROCEDURE_ _IDENT_ _SEMICOLON_ block . _SEMICOLON_

    _SEMICOLON_  shift, and go to state 103


state 83

   25 variable_loop: _IDENT_ ':' _IDENT_ .

    $default  reduce using rule 25 (variable_loop)


state 84

   26 variable_loop: variable_loop ',' _IDENT_ . ':' _IDENT_

    ':'  shift, and go to state 104


state 85

   62 compound_statement: _BEGIN_ statement_loop _END_ .

    $default  reduce using rule 62 (compound_statement)


state 86

   64 statement_loop: statement_loop _SEMICOLON_ . statement

    _BEGIN_  shift, and go to state 33
    _CALL_   shift, and go to state 34
    _DO_     shift, and go to state 35
    _FOR_    shift, and go to state 36
    _IDENT_  shift, and go to state 37
    _IF_     shift, and go to state 38
    _WHILE_  shift, and go to state 39

    statement           go to state 105
    assignment          go to state 42
    procedure_call      go to state 43
    if_statement        go to state 44
    while_statement     go to state 45
    do_statement        go to state 46
    for_statement       go to state 47
    compound_statement  go to state 48


state 87

   60 do_statement: _DO_ statement_loop _WHILE_ . expression _END_DO_

    _IDENT_   shift, and go to state 67
    _NUMBER_  shift, and go to state 68

    expression       go to state 106
    expression_loop  go to state 70
    term             go to state 71
    term_loop        go to state 72
    id_num           go to state 73


state 88

   61 for_statement: _FOR_ _IDENT_ _ASSIGNMENT_ . expression _DO_ statement_loop _END_FOR_

    _IDENT_   shift, and go to state 67
    _NUMBER_  shift, and go to state 68

    expression       go to state 107
    expression_loop  go to state 70
    term             go to state 71
    term_loop        go to state 72
    id_num           go to state 73


state 89

   56 assignment: _IDENT_ _ASSIGNMENT_ expression .

    $default  reduce using rule 56 (assignment)


state 90

   58 if_statement: _IF_ expression _THEN_ . statement _END_IF_

    _BEGIN_  shift, and go to state 33
    _CALL_   shift, and go to state 34
    _DO_     shift, and go to state 35
    _FOR_    shift, and go to state 36
    _IDENT_  shift, and go to state 37
    _IF_     shift, and go to state 38
    _WHILE_  shift, and go to state 39

    statement           go to state 108
    assignment          go to state 42
    procedure_call      go to state 43
    if_statement        go to state 44
    while_statement     go to state 45
    do_statement        go to state 46
    for_statement       go to state 47
    compound_statement  go to state 48


state 91

   67 expression_loop: expression_loop '+' . term

    _IDENT_   shift, and go to state 67
    _NUMBER_  shift, and go to state 68

    term       go to state 109
    term_loop  go to state 72
    id_num     go to state 73


state 92

   68 expression_loop: expression_loop '-' . term

    _IDENT_   shift, and go to state 67
    _NUMBER_  shift, and go to state 68

    term       go to state 110
    term_loop  go to state 72
    id_num     go to state 73


state 93

   71 term_loop: term_loop '*' . id_num

    _IDENT_   shift, and go to state 67
    _NUMBER_  shift, and go to state 68

    id_num  go to state 111


state 94

   72 term_loop: term_loop '/' . id_num

    _IDENT_   shift, and go to state 67
    _NUMBER_  shift, and go to state 68

    id_num  go to state 112


state 95

   59 while_statement: _WHILE_ expression _DO_ . statement_loop _END_WHILE_

    _BEGIN_  shift, and go to state 33
    _CALL_   shift, and go to state 34
    _DO_     shift, and go to state 35
    _FOR_    shift, and go to state 36
    _IDENT_  shift, and go to state 37
    _IF_     shift, and go to state 38
    _WHILE_  shift, and go to state 39

    statement           go to state 61
    assignment          go to state 42
    procedure_call      go to state 43
    if_statement        go to state 44
    while_statement     go to state 45
    do_statement        go to state 46
    for_statement       go to state 47
    compound_statement  go to state 48
    statement_loop      go to state 113


state 96

   23 constant_loop: constant_loop ',' _IDENT_ '=' . _NUMBER_

    _NUMBER_  shift, and go to state 114


state 97

   18 type_declaration: _TYPE_ _IDENT_ ':' . type _SEMICOLON_

    _ARRAY_  shift, and go to state 115
    _IDENT_  shift, and go to state 116
    '{'      shift, and go to state 117
    '['      shift, and go to state 118

    type             go to state 119
    basic_type       go to state 120
    enumerated_type  go to state 121
    range_type       go to state 122
    array_type       go to state 123


state 98

   16 procedure_interface: _PROCEDURE_ _IDENT_ . opt_formal_parameters

    '('  shift, and go to state 124

    $default  reduce using rule 14 (opt_formal_parameters)

    opt_formal_parameters  go to state 125
    formal_parameters      go to state 126


state 99

   17 function_interface: _FUNCTION_ . _IDENT_ opt_formal_parameters

    _IDENT_  shift, and go to state 127


state 100

   15 declaration_unit: _DECLARATION_ _OF_ _IDENT_ opt_constant_declaration opt_variable_declaration opt_type_declaration opt_procedure_interface opt_function_interface . _DECLARATION_ _END_

    _DECLARATION_  shift, and go to state 128


state 101

   11 opt_function_interface: function_interface .

    $default  reduce using rule 11 (opt_function_interface)


state 102

   47 function_declaration: _FUNCTION_ _IDENT_ _SEMICOLON_ block _SEMICOLON_ .

    $default  reduce using rule 47 (function_declaration)


state 103

   46 procedure_declaration: _PROCEDURE_ _IDENT_ _SEMICOLON_ block _SEMICOLON_ .

    $default  reduce using rule 46 (procedure_declaration)


state 104

   26 variable_loop: variable_loop ',' _IDENT_ ':' . _IDENT_

    _IDENT_  shift, and go to state 129


state 105

   64 statement_loop: statement_loop _SEMICOLON_ statement .

    $default  reduce using rule 64 (statement_loop)


state 106

   60 do_statement: _DO_ statement_loop _WHILE_ expression . _END_DO_

    _END_DO_  shift, and go to state 130


state 107

   61 for_statement: _FOR_ _IDENT_ _ASSIGNMENT_ expression . _DO_ statement_loop _END_FOR_

    _DO_  shift, and go to state 131


state 108

   58 if_statement: _IF_ expression _THEN_ statement . _END_IF_

    _END_IF_  shift, and go to state 132


state 109

   67 expression_loop: expression_loop '+' term .

    $default  reduce using rule 67 (expression_loop)


state 110

   68 expression_loop: expression_loop '-' term .

    $default  reduce using rule 68 (expression_loop)


state 111

   71 term_loop: term_loop '*' id_num .

    $default  reduce using rule 71 (term_loop)


state 112

   72 term_loop: term_loop '/' id_num .

    $default  reduce using rule 72 (term_loop)


state 113

   59 while_statement: _WHILE_ expression _DO_ statement_loop . _END_WHILE_
   64 statement_loop: statement_loop . _SEMICOLON_ statement

    _END_WHILE_  shift, and go to state 133
    _SEMICOLON_  shift, and go to state 86


state 114

   23 constant_loop: constant_loop ',' _IDENT_ '=' _NUMBER_ .

    $default  reduce using rule 23 (constant_loop)


state 115

   37 array_type: _ARRAY_ . _IDENT_ '[' range ']' _OF_ type

    _IDENT_  shift, and go to state 134


state 116

   30 basic_type: _IDENT_ .

    $default  reduce using rule 30 (basic_type)


state 117

   35 enumerated_type: '{' . ident_loop_comma '}'

    _IDENT_  shift, and go to state 135

    ident_loop_comma  go to state 136


state 118

   36 range_type: '[' . range ']'

    _NUMBER_  shift, and go to state 137

    range  go to state 138


state 119

   18 type_declaration: _TYPE_ _IDENT_ ':' type . _SEMICOLON_

    _SEMICOLON_  shift, and go to state 139


state 120

   28 type: basic_type .

    $default  reduce using rule 28 (type)


state 121

   31 basic_type: enumerated_type .

    $default  reduce using rule 31 (basic_type)


state 122

   32 basic_type: range_type .

    $default  reduce using rule 32 (basic_type)


state 123

   29 type: array_type .

    $default  reduce using rule 29 (type)


state 124

   21 formal_parameters: '(' . ident_loop_semicolon ')'

    _IDENT_  shift, and go to state 140

    ident_loop_semicolon  go to state 141


state 125

   16 procedure_interface: _PROCEDURE_ _IDENT_ opt_formal_parameters .

    $default  reduce using rule 16 (procedure_interface)


state 126

   13 opt_formal_parameters: formal_parameters .

    $default  reduce using rule 13 (opt_formal_parameters)


state 127

   17 function_interface: _FUNCTION_ _IDENT_ . opt_formal_parameters

    '('  shift, and go to state 124

    $default  reduce using rule 14 (opt_formal_parameters)

    opt_formal_parameters  go to state 142
    formal_parameters      go to state 126


state 128

   15 declaration_unit: _DECLARATION_ _OF_ _IDENT_ opt_constant_declaration opt_variable_declaration opt_type_declaration opt_procedure_interface opt_function_interface _DECLARATION_ . _END_

    _END_  shift, and go to state 143


state 129

   26 variable_loop: variable_loop ',' _IDENT_ ':' _IDENT_ .

    $default  reduce using rule 26 (variable_loop)


state 130

   60 do_statement: _DO_ statement_loop _WHILE_ expression _END_DO_ .

    $default  reduce using rule 60 (do_statement)


state 131

   61 for_statement: _FOR_ _IDENT_ _ASSIGNMENT_ expression _DO_ . statement_loop _END_FOR_

    _BEGIN_  shift, and go to state 33
    _CALL_   shift, and go to state 34
    _DO_     shift, and go to state 35
    _FOR_    shift, and go to state 36
    _IDENT_  shift, and go to state 37
    _IF_     shift, and go to state 38
    _WHILE_  shift, and go to state 39

    statement           go to state 61
    assignment          go to state 42
    procedure_call      go to state 43
    if_statement        go to state 44
    while_statement     go to state 45
    do_statement        go to state 46
    for_statement       go to state 47
    compound_statement  go to state 48
    statement_loop      go to state 144


state 132

   58 if_statement: _IF_ expression _THEN_ statement _END_IF_ .

    $default  reduce using rule 58 (if_statement)


state 133

   59 while_statement: _WHILE_ expression _DO_ statement_loop _END_WHILE_ .

    $default  reduce using rule 59 (while_statement)


state 134

   37 array_type: _ARRAY_ _IDENT_ . '[' range ']' _OF_ type

    '['  shift, and go to state 145


state 135

   33 ident_loop_comma: _IDENT_ .

    $default  reduce using rule 33 (ident_loop_comma)


state 136

   34 ident_loop_comma: ident_loop_comma . ',' _IDENT_
   35 enumerated_type: '{' ident_loop_comma . '}'

    ','  shift, and go to state 146
    '}'  shift, and go to state 147


state 137

   38 range: _NUMBER_ . _DOUBLE_DOT_ _NUMBER_

    _DOUBLE_DOT_  shift, and go to state 148


state 138

   36 range_type: '[' range . ']'

    ']'  shift, and go to state 149


state 139

   18 type_declaration: _TYPE_ _IDENT_ ':' type _SEMICOLON_ .

    $default  reduce using rule 18 (type_declaration)


state 140

   19 ident_loop_semicolon: _IDENT_ .

    $default  reduce using rule 19 (ident_loop_semicolon)


state 141

   20 ident_loop_semicolon: ident_loop_semicolon . _SEMICOLON_ _IDENT_
   21 formal_parameters: '(' ident_loop_semicolon . ')'

    _SEMICOLON_  shift, and go to state 150
    ')'          shift, and go to state 151


state 142

   17 function_interface: _FUNCTION_ _IDENT_ opt_formal_parameters .

    $default  reduce using rule 17 (function_interface)


state 143

   15 declaration_unit: _DECLARATION_ _OF_ _IDENT_ opt_constant_declaration opt_variable_declaration opt_type_declaration opt_procedure_interface opt_function_interface _DECLARATION_ _END_ .

    $default  reduce using rule 15 (declaration_unit)


state 144

   61 for_statement: _FOR_ _IDENT_ _ASSIGNMENT_ expression _DO_ statement_loop . _END_FOR_
   64 statement_loop: statement_loop . _SEMICOLON_ statement

    _END_FOR_    shift, and go to state 152
    _SEMICOLON_  shift, and go to state 86


state 145

   37 array_type: _ARRAY_ _IDENT_ '[' . range ']' _OF_ type

    _NUMBER_  shift, and go to state 137

    range  go to state 153


state 146

   34 ident_loop_comma: ident_loop_comma ',' . _IDENT_

    _IDENT_  shift, and go to state 154


state 147

   35 enumerated_type: '{' ident_loop_comma '}' .

    $default  reduce using rule 35 (enumerated_type)


state 148

   38 range: _NUMBER_ _DOUBLE_DOT_ . _NUMBER_

    _NUMBER_  shift, and go to state 155


state 149

   36 range_type: '[' range ']' .

    $default  reduce using rule 36 (range_type)


state 150

   20 ident_loop_semicolon: ident_loop_semicolon _SEMICOLON_ . _IDENT_

    _IDENT_  shift, and go to state 156


state 151

   21 formal_parameters: '(' ident_loop_semicolon ')' .

    $default  reduce using rule 21 (formal_parameters)


state 152

   61 for_statement: _FOR_ _IDENT_ _ASSIGNMENT_ expression _DO_ statement_loop _END_FOR_ .

    $default  reduce using rule 61 (for_statement)


state 153

   37 array_type: _ARRAY_ _IDENT_ '[' range . ']' _OF_ type

    ']'  shift, and go to state 157


state 154

   34 ident_loop_comma: ident_loop_comma ',' _IDENT_ .

    $default  reduce using rule 34 (ident_loop_comma)


state 155

   38 range: _NUMBER_ _DOUBLE_DOT_ _NUMBER_ .

    $default  reduce using rule 38 (range)


state 156

   20 ident_loop_semicolon: ident_loop_semicolon _SEMICOLON_ _IDENT_ .

    $default  reduce using rule 20 (ident_loop_semicolon)


state 157

   37 array_type: _ARRAY_ _IDENT_ '[' range ']' . _OF_ type

    _OF_  shift, and go to state 158


state 158

   37 array_type: _ARRAY_ _IDENT_ '[' range ']' _OF_ . type

    _ARRAY_  shift, and go to state 115
    _IDENT_  shift, and go to state 116
    '{'      shift, and go to state 117
    '['      shift, and go to state 118

    type             go to state 159
    basic_type       go to state 120
    enumerated_type  go to state 121
    range_type       go to state 122
    array_type       go to state 123


state 159

   37 array_type: _ARRAY_ _IDENT_ '[' range ']' _OF_ type .

    $default  reduce using rule 37 (array_type)
